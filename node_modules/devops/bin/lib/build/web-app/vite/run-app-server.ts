import child_process from "child_process";
import path from "path";
import { chalk } from "../../../util/chalk.js";
import { logQueue } from "../../../util/log-queue.js";

/**
 * Entry method for the app dev server
 */
export default async function run() {
  console.warn(
    "\nRunning the App server at: ",
    chalk.yellowBrightBold(path.resolve("app/server")),
    "\n"
  );

  process.env.RESOURCE_PATH =
    process.env.RESOURCE_PATH || path.resolve("build/client");
  const ls = child_process.spawn("tsx", [
    "watch",
    "--clear-screen=false",
    "--tsconfig",
    path.resolve("tsconfig.json"),
    path.resolve("app/server/index.ts"),
  ]);

  ls.stdout.on("data", function (data) {
    logQueue(`${data.toString().slice(0, -1)}`);
  });

  ls.stderr.on("data", function (data) {
    logQueue(`${data.toString().slice(0, -1)}`);
  });

  async function handleExit1() {
    ls.kill();
    console.warn("EXIT BUILD SERVER");
  }

  const handleExit = (message: string) => (err?: Error) => {
    console.warn(chalk.redBrightBold(message));
    err ? console.warn(chalk.redBrightBold(err.stack || err.message)) : null;
    process.exit(0);
  };

  // Catch when app is closing
  process.on("exit", handleExit1);
  // Catch ctrl+c event
  process.on("SIGINT", handleExit("SIGINT"));
  // Catch "kill pid" (for example: nodemon restart)
  process.on("SIGUSR1", handleExit("SIGUSR1"));
  process.on("SIGUSR2", handleExit("SIGUSR2"));
  process.on("SIGTERM", handleExit("SIGTERM"));
  // Catch uncaught exceptions
  process.on("uncaughtException", handleExit("uncaughtException"));
}
