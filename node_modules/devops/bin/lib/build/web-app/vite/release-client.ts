import * as Vite from "vite";
import fs from "fs-extra";
import Ignore from "ignore";
import path from "path";
import { buildViteConfig } from "../../build-vite-config.js";
import { chalk } from "../../../util/chalk.js";
import { viteDevopsAppConfigPlugin } from "../../../../../shim/vite-plugins/vite-devops-app-config-plugin.js";

const gitIgnorePath = path.resolve(".gitignore");
let ignore = Ignore();

if (fs.existsSync(gitIgnorePath)) {
  ignore = ignore.add(fs.readFileSync(gitIgnorePath).toString());
}

/**
 * This performs the bundling process for distribution.
 */
export default async function run(env: string) {
  if (process.env.FORCE_BUILD !== "true") {
    if (
      !fs.existsSync(path.resolve("app/client")) ||
      ignore.ignores("app/client")
    ) {
      console.warn(
        "Tried to make a release for the web app client, but no app/client entry file was found. (or was gitignored)"
      );
      return;
    }
  }

  const nodeEnvBak = process.env.NODE_ENV;
  process.env.NODE_ENV = "production";

  console.warn(
    `Releasing ${chalk.yellowBrightBold("app/client")} for Environment:`,
    chalk.cyanBrightBold(env)
  );
  process.env.BUILD_ENV = env;

  const config = await buildViteConfig();

  // Make sure our environment is replaced for the build
  config.plugins = [viteDevopsAppConfigPlugin(env), ...(config.plugins || [])];

  config.logLevel = "warn";
  config.mode = "production";
  config.root = path.resolve("app/client");
  config.build!.outDir = path.resolve("dist/app/client", env);
  config.build!.watch = void 0;
  config.build!.rollupOptions!.output = {
    dir: config.build!.outDir,
    entryFileNames: "index.js",
    chunkFileNames: "index.js",
    manualChunks: undefined,
  };

  await Vite.build(config);
  process.env.NODE_ENV = nodeEnvBak;

  // Run a quick check to make sure the distribution file was made
  if (!fs.existsSync(path.resolve(`dist/app/client/${env}/index.js`))) {
    console.error(
      "\n\nFailed to create Client output bundle. Exiting process...\n\n"
    );
    process.exit(1);
  }
}
