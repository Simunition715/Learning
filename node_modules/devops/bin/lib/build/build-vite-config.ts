import * as Vite from "vite";
import fs from "fs-extra";
import path from "path";
import { chalk } from "../util/chalk.js";

/**
 * Generates a vite config suitable for running a Vite.build operation. The
 * various available targets modifies the behavior to target different folders.
 */
export async function buildViteConfig() {
  console.warn(
    "Building Vite config using base:",
    chalk.yellowBrightBold(path.resolve("vite.config.ts"))
  );
  // Start with the target project defined configuration
  let config: Vite.UserConfig = await (
    await import(path.resolve("vite.config.ts"))
  ).default();

  // Import the target project's tsconfig so we can include the same inclusions
  // the TS compiler would use for the watch process.
  const tsconfig = await fs.readJSONSync(path.resolve("tsconfig.json"));

  config = {
    ...config,
    logLevel: "info",
    mode: "development",
    root: path.resolve("app/client"),
    clearScreen: true,
    build: {
      ...config.build,
      cssCodeSplit: true,
      outDir: path.resolve("build/client"),
      sourcemap: true,
      rollupOptions: {
        output: {
          manualChunks: undefined,
        },
      },
      watch: {
        ...config.build?.watch,
        include: [
          ...((Array.isArray(config.build?.watch?.include)
            ? config.build?.watch?.include
            : [config.build?.watch?.include]) || []),
          ...(tsconfig?.include?.map((i: string) => path.resolve(i)) || []),
          "tsconfig.json",
        ].filter(Boolean),
      },
      emptyOutDir: true,
    },
    resolve: {
      alias: {
        config: path.resolve(`app/config`),
      },
    },
  };

  return config;
}
