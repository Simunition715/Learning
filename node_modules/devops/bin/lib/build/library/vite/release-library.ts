import * as Vite from "vite";
import fs from "fs";
import Ignore from "ignore";
import path from "path";
import { buildViteConfig } from "../../build-vite-config.js";
import { chalk } from "../../../util/chalk.js";
import { releaseLibraryTypes } from "./release-library-types.js";
import { targetProjectDependencies } from "../../../target-project/target-project-dependencies.js";
import { targetProjectName } from "../../../target-project/target-project-name.js";

const gitIgnorePath = path.resolve(".gitignore");
let ignore = Ignore();

if (fs.existsSync(gitIgnorePath)) {
  ignore = ignore.add(fs.readFileSync(gitIgnorePath).toString());
}

/**
 * Bundles the library for distribution
 */
export default async function run() {
  if (!process.env.FORCE_BUILD) {
    if (!fs.existsSync(path.resolve("ui")) || ignore.ignores("ui")) {
      console.warn(
        "No library project found (or was gitignored) for bundling release at:",
        path.resolve("ui")
      );
      return;
    }
  }

  console.warn(chalk.yellowBrightBold("Starting Vite client build..."));
  if (!fs.existsSync(path.resolve("ui/index.ts"))) {
    console.warn(
      "The UI folder project has no index.ts entry point to create the library."
    );
    return;
  }

  // Update the .d.ts files for the library project
  await releaseLibraryTypes();

  console.warn(chalk.yellowBrightBold("Building library bundle..."));
  const config = await buildViteConfig();

  config.logLevel = "warn";
  config.root = path.resolve("ui");
  config.build!.lib = {
    // Could also be a dictionary or array of multiple entry points
    entry: path.resolve("ui/index.ts"),
    name: (await targetProjectName()).split("@").join("").split("/").join("_"),
    // The proper extensions will be added
    fileName: "index",
  };

  config.mode = "production";
  config.root = path.resolve("app/client");
  config.build!.outDir = path.resolve("dist/ui");
  config.build!.watch = void 0;
  config.build!.rollupOptions!.output = {
    dir: config.build!.outDir,
    entryFileNames: "index.js",
    chunkFileNames: "index.js",
    manualChunks: undefined,
  };

  config.build!.rollupOptions = {
    ...config.build!.rollupOptions,
    external: Object.keys(await targetProjectDependencies()),
  };

  await Vite.build(config);
}
