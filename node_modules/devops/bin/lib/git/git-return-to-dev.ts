import child_process from "child_process";
import { gitHasChanges } from "./git-has-changes.js";
import { isChildProcessError } from "../util/is-child-process-error.js";
import { promptConfirm } from "../prompt/prompt-confirm.js";

/**
 * Returns the current context back to dev and resets to the latest in dev.
 *
 * Returns true if the operation completed successfully.
 *
 * If false is returned, the git state should be considered undefined.
 */
export async function gitReturnToDev(withPrompt?: boolean) {
  // If a prompt was requested, we will ask the user if they wish to let this
  // operation happen.
  if (withPrompt) {
    const shouldGitBranch = await promptConfirm(`
      Would you like to return back to development?
      Runs the following:
        git fetch
        git checkout dev
        git reset --hard origin/dev
    `);

    if (!shouldGitBranch) return;
  }

  if (await gitHasChanges()) {
    console.error(
      "Can not return to dev branch as changes are present on the current branch."
    );

    return false;
  }

  try {
    child_process.execFileSync("git", ["fetch"], {
      stdio: "inherit",
    });
    child_process.execFileSync("git", ["checkout", "dev"], {
      stdio: "inherit",
    });
    child_process.execFileSync("git", ["reset", "--hard", "origin/dev"], {
      stdio: "inherit",
    });
  } catch (err) {
    if (isChildProcessError(err)) {
      console.error(
        `Error: failed to return to dev branch and reset with error code: ${err.status}`
      );

      return false;
    }
  }

  return true;
}
