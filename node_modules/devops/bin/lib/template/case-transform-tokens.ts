import { template } from "../util/template.js";
import changecase from "change-case";
import fs from "fs-extra";
import path from "path";

/**
 * This loads a template file and replaces all found tokens with the options
 * provided. This allows each token to be specified with a case change syntax:
 *
 * ${token: case type}
 *
 * Where case type can be:
 *
 * - upper
 * - lower
 * - camel
 * - pascal
 * - constant
 * - sentence
 * - header
 * - snake
 * - kebab
 * - param
 */
export function caseTransformTokens(
  options: Record<string, string>,
  templatePath: string
) {
  const onToken = (file: string) => (match: string) => {
    match = match.trim();
    const checks = match.split(":").map((s) => s.trim());
    let result: string = options[checks[0]] || checks[0];

    if (!options[checks[0]]) {
      console.warn(
        "No available option for token specified for template file:",
        {
          file,
          match,
        }
      );
    }

    // Look for a transform to the case
    switch (checks[1]) {
      case "upper":
        result = changecase.capitalCase(result);
        break;
      case "lower":
        result = result.toLowerCase();
        break;
      case "camel":
        result = changecase.camelCase(result);
        break;
      // case "title": result = changecase.titleCase(result); break;
      case "pascal":
        result = changecase.pascalCase(result);
        break;
      case "constant":
        result = changecase.constantCase(result);
        break;
      case "sentence":
        result = changecase.sentenceCase(result);
        break;
      case "header":
        result = changecase.headerCase(result);
        break;
      case "snake":
        result = changecase.snakeCase(result);
        break;

      case "kebab":
      case "param":
        result = changecase.paramCase(result);
        break;

      default:
        console.warn(
          "Invalid transform specified for token within template file:",
          { file, match }
        );
        break;
    }

    return result;
  };

  const templateFileName = path.basename(templatePath);

  // Generate all of the contents of our files by replacing the relevant terms
  return template({
    template: fs.readFileSync(templatePath, { encoding: "utf-8" }),
    options: {},
    onToken: onToken(templateFileName),
  });
}
