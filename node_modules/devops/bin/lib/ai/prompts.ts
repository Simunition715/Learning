import { GeneratedFiles, getGeneratedFiles } from "./helpers.js";

type FileType = keyof GeneratedFiles;

interface PromptStarterVars {
  prompt: string;
  snakeName: string;
  pascalName: string;
  directory: string;
  fragments: ReturnType<typeof getGeneratedFiles>;
}

export const prompts = ({
  prompt,
  pascalName,
  fragments,
}: PromptStarterVars) => {
  return {
    userCriteria: (_fileType: FileType) =>
      `
It should follow these criteria:
${prompt}\n
`,

    writeNewFile: (fileType: FileType) => {
      const newFilePrompt: Record<FileType, string> = {
        component: `Write a new component \`${pascalName}\`.`,
        scss: `Based on the component you generated, write an associated scss file named \`${fragments.scss.fileName}\``,
        componentTypes: `Based on the component and styles you generated, write an associated types file named \`${fragments.componentTypes.fileName}\`.`,
        props: `Based on \`I${pascalName}\` interface you generated for the component, write an associated file named \`${fragments.props.fileName}\`.`,
        story: `Write a storybook file named ${fragments.story.fileName}.`,
      };

      return newFilePrompt[fileType];
    },

    codeContext: (code: { fileName: string; code: string }[]) => {
      return `Here are some files you generated for me earlier for context:\n${code
        .map(({ fileName, code }) => `// ${fileName}\n${code}\n`)
        .join("\n")}`;
    },

    codeStructure: (fileType: FileType) => {
      const codeStructurePrompt: Record<FileType, string> = {
        component: `Make sure it looks similar to this structure:
// ${fragments.component.fileName}
\`\`\`tsx
${fragments.component.content}
\`\`\`
`,
        scss: ``,
        componentTypes: `Make sure it looks similar to this structure:
\`\`\`ts
${fragments.componentTypes.content}
\`\`\`
`,
        props: ``,
        story: ``,
      };

      return codeStructurePrompt[fileType];
    },

    instructions: (fileType: FileType) => {
      const instructionsPrompt: Record<FileType, string> = {
        component: `Output only code.`,
        scss: `Don't import any other scss files, just write the scss for this component. If you need to use a mixin, write it in this file.
If you need to use a color, use an arbitrary hex value.
Output only code.
`,
        componentTypes: `Fix any prop types that might be wrong.
Output only code.
`,
        props: `Define a MobX store class called \`Store\` that \`implements I${pascalName}\` interface.
Store should serve as a MobX store for the props of the ${pascalName} component, except for \`className\`, \`containerProps\`, and \`mode\`.
Store should make the props observable properties, actions to modify each of those properties, and a function to instantiate an instance of that store.
`,
        story: ``,
      };

      return instructionsPrompt[fileType];
    },
  };
};
