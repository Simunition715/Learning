import { chalk } from "../util/chalk.js";
import {
  ChatCompletionRequestMessage,
  Configuration,
  Model,
  OpenAIApi,
} from "openai";

export type AI = {
  core: OpenAIApi;
  getModels: () => Promise<(Model | { id: string })[]>;
  getCode: (messages: ChatCompletionRequestMessage[]) => Promise<string>;
  getChat: (prompt: string) => Promise<string>;
};

const AIServerErrorMessage = "AI server error. See console for details.";

/**
 * Checks if the environment is configured with the User's OPENAI_API_KEY thus
 * making AI functionality available.
 */
export async function getAI(): Promise<AI | null> {
  const check = Boolean(process.env.OPENAI_API_KEY);
  if (!check) return null;

  const ai = new OpenAIApi(
    new Configuration({
      apiKey: process.env.OPENAI_API_KEY,
      organization: process.env.OPENAI_ORG || "geniant",
    })
  );

  return {
    core: ai,
    getModels: async () => {
      const response = await ai.listModels().catch((err) => {
        console.error(chalk.red("AI getCode error from the server:"));
        console.error(err.data);
        return null;
      });

      return response?.data.data || [{ id: AIServerErrorMessage }];
    },
    getCode: async (messages) => {
      const response = await ai
        .createChatCompletion({
          model: "gpt-3.5-turbo",
          messages,
        })
        .catch((err) => {
          console.error(chalk.red("AI getCode error from the server:"));
          console.error(err?.response?.data);
          return null;
        });

      console.warn(response?.data.usage);

      return response?.data.choices[0].message?.content || AIServerErrorMessage;
    },
    getChat: async (prompt: string) => {
      const response = await ai
        .createCompletion({
          model: "text-davinci-003",
          prompt,
          temperature: 0.9,
          max_tokens: 150,
          top_p: 1,
          frequency_penalty: 0.0,
          presence_penalty: 0.6,
          stop: [" Human:", " AI:"],
        })
        .catch((err) => {
          console.error(chalk.red("AI getCode error from the server:"));
          console.error(err?.response?.data);
          return null;
        });

      return response?.data.choices[0]?.text || AIServerErrorMessage;
    },
  };
}
