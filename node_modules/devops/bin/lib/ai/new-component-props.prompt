// breadcrumbs.types.ts
Don't delete any of these exports
/** Rendering modes of this component */
export const BreadcrumbsMode = {} as const;

export type BreadcrumbsModeType =
  typeof BreadcrumbsMode[keyof typeof BreadcrumbsMode];

export interface IBreadcrumb {
  /** The displayed label of this breadcrumb */
  label: string;
  /** Flag as true to indicate to the user that this crumb is non-interactive */
  disable?: boolean;
  /** Flag as true to make the current breadcrumb darker */
  isBackLink?: boolean;
  /** Put an icon before the breadcrumb link */
  icon?: IBreadcrumbDecal;
  /** Executes when the user clicks on this breadcrumb.*/
  onClick?(): void;
}

/**
 * Breadcrumbs props
 */
export interface IBreadcrumbs {
  /** Provides a custom class name to the container of this component */
  className?: string;
  /** Props to apply directly to the container div of this component */
  containerProps?: React.HTMLProps<HTMLDivElement>;
  /** Rendering mode of this component */
  mode?: BreadcrumbsModeType;
  /** List of all crumbs in the order they should appear */
  crumbs: IBreadcrumb[];
}

// breadcrumbs-props.ts
import { action as printAction } from "@storybook/addon-actions";
import { action, makeObservable, observable } from "mobx";
```import { IBreadcrumb, IBreadcrumbs, IconShape } from "../../../components";```

class Store implements IBreadcrumbs {
  @observable crumbs: IBreadcrumb[] = [
    {
      label: "Home Page",
      isBackLink: true,
      onClick: () => {
        printAction("Home Page link clicked")();
      },
    },
    { label: "Another Link" },
    { label: "Last One" },
  ];

  constructor() {
    makeObservable(this);
  }

  @action
  empty() {
    this.crumbs = [];
    return this;
  }

  @action
  one() {
    this.crumbs = [{ label: "Bread Crumb", disable: true }];
    return this;
  }

  @action
  custom(crumbs: IBreadcrumb[]) {
    this.crumbs = crumbs;
    return this;
  }

  @action
  withIcons() {
    this.crumbs = [
      {
        label: "Return Home",
        isBackLink: true,
      },
      { label: "Campaign, 2022", icon: { shape: IconShape.SPEED } },
      { label: "Level Two", icon: { shape: IconShape.ACCOUNT_TREE } },
    ];
    return this;
  }
}

// the name should change, but keep the function the same
export const BreadcrumbsProps = () => new Store();

// ${{fileName}}.tsx
${{componentTypesFileContent}}

// ${{fileName}}.types.ts
${{componentTypesFileContent}}

// ${{fileName}}-props.tsx
${{componentPropsFileContent}}

Requirements:
1. In ${{fileName}}-props.tsx, import { I${{componentName}} } from "../../../components".
2. Expand on the provided starter file ${{fileName}}-props.tsx
3. This new file should import and use the I${{componentName}} interface from ${{fileName}}.types.ts.
4. Use ${{fileName}}.tsx for context.
5. Define a MobX store class called Store that implements the I${{componentName}} interface.
6. Store should serve as a MobX store for the props of the ${{componentName}} component, except for `className`, `containerProps`, and `mode`.
7. Store should make the props observable properties, actions to modify those properties, and a function to instantiate new instances of the store.
8. IMPORTANT => Make sure to always format the output in this way: wrap each file in <geniantcode fileName="${{fileName}}-props.tsx"> tags, and don't change any of the original named exports, component names, or type names. Also remove all comments.
9. Keep the users requirements in mind: ${{prompt}}