// breadcrumbs-props.ts
import { action as printAction } from "@storybook/addon-actions";
import { action, makeObservable, observable } from "mobx";
import { IBreadcrumb, IBreadcrumbs, IconShape } from "../../../components";

class Store implements IBreadcrumbs {
  @observable crumbs: IBreadcrumb[] = [
    {
      label: "Home Page",
      isBackLink: true,
      onClick: () => {
        printAction("Home Page link clicked")();
      },
    },
    { label: "Another Link" },
    { label: "Last One" },
  ];

  constructor() {
    makeObservable(this);
  }

  @action
  empty() {
    this.crumbs = [];
    return this;
  }

  @action
  one() {
    this.crumbs = [{ label: "Bread Crumb", disable: true }];
    return this;
  }

  @action
  custom(crumbs: IBreadcrumb[]) {
    this.crumbs = crumbs;
    return this;
  }

  @action
  withIcons() {
    this.crumbs = [
      {
        label: "Return Home",
        isBackLink: true,
      },
      { label: "Campaign, 2022", icon: { shape: IconShape.SPEED } },
      { label: "Level Two", icon: { shape: IconShape.ACCOUNT_TREE } },
    ];
    return this;
  }
}

// the name should change, but keep the function the same
export const BreadcrumbsProps = () => new Store();

// breadcrumbs.stories.tsx
import React from "react";
import { Breadcrumbs, BreadcrumbsMode } from "../../../components";
import { BreadcrumbsProps } from "../../data/${{componentSubdirectory}}/breadcrumbs-props";
import { enumOptions } from "../../util/enum-options";

export default {
  title: "components/${{componentSubdirectory}}/Breadcrumbs",
  component: Breadcrumbs,
  args: {},
  argTypes: {
    mode: { type: "selection", options: enumOptions("BreadcrumbsMode", BreadcrumbsMode) },
    children: { table: { disable: true } },
    className: { table: { disable: true } },
    containerProps: { table: { disable: true } },
  },
};

const Template = (children?: any) => (args: any) => <Breadcrumbs {...args}>{children}</Breadcrumbs>;

export const Basic = Template().bind({});
Basic.args = BreadcrumbsProps();

export const Empty = Template().bind({});
Empty.args = BreadcrumbsProps().empty();

export const One = Template().bind({});
One.args = BreadcrumbsProps().one();

export const Icons = Template().bind({});
Icons.args = BreadcrumbsProps().withIcons();

// ${{fileName}}.tsx
${{componentFileContent}}

// ${{fileName}}.types.ts
${{componentTypesFileContent}}

// ${{fileName}}-props.tsx
${{componentPropsFileContent}}

Requirements:
1. Only generate a ${{fileName}}.stories.tsx 
2. Use ${{fileName}}.tsx for context 
3. Use ${{fileName}}.types.ts MobX store to exapnd on the provided starter file ${{fileName}}.stories.tsx in the following way:
4. In the same way the breadcrumbs.stories.tsx has stories to test the actions of the breadcrumbs-props.ts, the generated stories should test permutations of MobX stores' @actions within ${{fileName}}-props.ts
5. Don't change any of the original named exports, component names, or type names.
6. Keep the users requirements in mind: ${{prompt}}
7. Follow the structure of `breadcrumbs.stories.tsx`
8. Remove all comments
9. This is important: wrap all files in <geniantcode fileName="${{fileName}} with file extension"> tags