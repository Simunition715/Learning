import path from "path";
import { glob } from "glob";
import { paramCase } from "change-case";
import { Paths } from "./check-component-structure.js";
import { Selections } from "./find-component.js";

/**
 * This generates all of the pathing information needed for a single selected
 * component name.
 */
export function getComponentPaths(paths: Paths, selections: Selections) {
  const kebabName = paramCase(selections.name);

  // Get the path to all of the related files
  const componentPath = path.resolve(
    paths.componentsPath,
    selections.directory,
    kebabName,
    `${kebabName}.tsx`
  );

  const scssPath = path.resolve(
    paths.componentsPath,
    selections.directory,
    kebabName,
    `${kebabName}.scss`
  );

  const storyPath = path.resolve(paths.storiesComponents, selections.directory);
  const storyPaths: string[] = [];

  glob
    .sync(path.resolve(storyPath, `${kebabName}*.stories.tsx`))
    .forEach((f) => {
      storyPaths.push(f);
    });

  // We must ensure the base story file exists
  if (storyPaths.length === 0) {
    const baseStoryPath = path.resolve(storyPath, `${kebabName}.stories.tsx`);

    if (!storyPaths.includes(baseStoryPath)) {
      storyPaths.push(baseStoryPath);
    }
  }

  const propsPath = path.resolve(paths.storiesData, selections.directory);
  const propsPaths: string[] = [];

  glob.sync(path.resolve(propsPath, `${kebabName}*-props.tsx`)).forEach((f) => {
    storyPaths.push(f);
  });

  // We must ensure the base props file exists
  if (propsPaths.length === 0) {
    const basePropPath = path.resolve(propsPath, `${kebabName}-props.tsx`);

    if (!propsPaths.includes(basePropPath)) {
      propsPaths.push(basePropPath);
    }
  }

  return {
    component: componentPath,
    scss: scssPath,
    stories: storyPaths,
    props: propsPaths,
  };
}
