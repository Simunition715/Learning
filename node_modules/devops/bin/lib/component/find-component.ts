import path from "path";
import { checkComponentStructure, Paths } from "./check-component-structure.js";
import { getAllComponents } from "./get-all-components.js";
import { paramCase, pascalCase } from "change-case";

export type Selections = {
  directory: string;
  name: string;
};

/**
 * Find the component and the directory it is located within
 */
async function getDirectory(paths: Paths, name: string) {
  name = pascalCase(
    name
      .split(" ")
      .map((s) => pascalCase(s))
      .join("")
  );

  // Search for this component name within the components folder to find
  // component with matching name
  const allComponents = await getAllComponents(paths);
  const checkFiles = new Map();
  allComponents.forEach((f) => checkFiles.set(path.basename(f), f));
  const componentPath =
    checkFiles.get(`${name}.tsx`) || checkFiles.get(`${paramCase(name)}.tsx`);
  let selectedDirectory = "";

  // See if we have a match with a component name
  if (componentPath) {
    selectedDirectory = path.basename(
      path.dirname(path.dirname(componentPath))
    );
  } else {
    console.warn(
      `Unable to find a component with name ${name}.tsx or ${paramCase(
        name
      )}.tsx`
    );
    process.exit(1);
  }

  return {
    directory: selectedDirectory,
    name,
  };
}

/**
 * Finds the component and returns it's pathing information, name and directory.
 *
 * This takes in any case of the component (including the name with spaces) name
 * and will find the component.
 */
export default async function findComponent(search: string, paths?: Paths) {
  paths = paths || (await checkComponentStructure());
  const selections = await getDirectory(paths, search);

  return {
    paths,
    ...selections,
  };
}
