type Value = string | number | boolean;
type ParseResult = Record<string, Value | Record<string, Value>>;

/**
 * This parses a props file into a map of key/value pairs.
 */
export function parseProps(contents: string): ParseResult {
  const lines = contents.split(/\r?\n/);

  const result: ParseResult = {};
  let currentSection: string | null = null;
  let currentObject: string | null = null;

  lines.forEach((line) => {
    line = line.trim();

    // Ignore empty lines and comments
    if (line === "" || line.startsWith("#")) {
      return;
    }

    // Check for a new section
    if (line.endsWith("{")) {
      const sectionName = line.split(/\s+/)[0];
      currentSection = sectionName;
      result[currentSection] = {};
      return;
    }

    // Check for the end of a section
    if (line === "}") {
      currentSection = null;
      currentObject = null;
      return;
    }

    // Parse key-value pairs
    const match = line.match(/^([\w.]+)\s*=\s*(.*)$/);
    if (match) {
      const key = match[1];
      let value: string | number | boolean = match[2];

      // Convert values to the appropriate type
      if (!isNaN(parseFloat(value))) {
        value = parseFloat(value);
      } else if (value === "true") {
        value = true;
      } else if (value === "false") {
        value = false;
      }

      // Add the key-value pair to the result
      if (currentObject) {
        (
          result[currentSection ?? "null"] as unknown as Record<
            string,
            Record<string, Value>
          >
        )[currentObject][key] = value;
      } else if (currentSection) {
        (result[currentSection] as Record<string, Value>)[key] = value;
      } else {
        result[key] = value;
      }

      return;
    }

    // Check for a new object in a section
    const objectMatch = line.match(/^([\w.]+)\.([\w.]+)\s*=\s*(.*)$/);
    if (objectMatch) {
      const sectionName = objectMatch[1];
      const objectName = objectMatch[2];
      const key = objectMatch[3];

      if (!result[sectionName]) {
        result[sectionName] = {};
      }

      if (
        !(
          result[sectionName] as unknown as Record<
            string,
            Record<string, Value>
          >
        )[objectName]
      ) {
        (
          result[sectionName] as unknown as Record<
            string,
            Record<string, Value>
          >
        )[objectName] = {};
      }

      ((result[sectionName] as any)[objectName] as any)[key] = null;
      currentSection = sectionName;
      currentObject = objectName;

      return;
    }

    console.error(`Unrecognized line: ${line}`);
  });

  return result;
}
