import child_process from "child_process";
import path from "path";
import shell from "shelljs";
import url from "url";
import { chalk } from "../lib/util/chalk.js";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

/**
 * This runs storybook in this context on behalf of the project the devops is
 * installed within.
 */
export default async function run(
  build: string,
  include: string[],
  ..._args: any[]
) {
  const PROJECT_ROOT = path.resolve(".");
  process.env.PROJECT_ROOT = PROJECT_ROOT;
  const storybookConfigPath = path.resolve(".storybook");
  // Run this package's storybook script command.
  shell.cd(path.resolve(__dirname, "../../"));

  // Set up an environment that will be processed in the main.js of storyybook
  // config. This will cause all specified modules to be looked for when
  // gathering stories to include in the build.
  if (include && include.length > 0) {
    process.env.NODE_MODULES_STORIES = include.join(",");
  }

  if (build === "build") {
    try {
      child_process.execFileSync(
        "npm",
        [
          "run",
          "storybook",
          "--",
          "build",
          "-c",
          storybookConfigPath,
          "-o",
          path.resolve(PROJECT_ROOT, "storybook-static"),
        ],
        {
          stdio: "inherit",
        }
      );
    } catch (e) {
      console.error(chalk.redBrightBold("Failed to build storybook"));
      console.error(e);
    }
  } else {
    try {
      child_process.execFileSync(
        "npm",
        [
          "run",
          "storybook",
          "--",
          "dev",
          "--no-version-updates",
          "-p",
          process.env.PORT || "6006",
          "-c",
          storybookConfigPath,
        ],
        {
          stdio: "inherit",
        }
      );
    } catch (e) {
      console.error(chalk.redBrightBold("Failed to run storybook"));
      console.error(e);
    }
  }
}
