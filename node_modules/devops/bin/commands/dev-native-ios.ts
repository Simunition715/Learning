import * as Vite from "vite";
import fs from "fs-extra";
import path from "path";
import { buildViteConfig } from "../lib/build/build-vite-config.js";
import { chalk } from "../lib/util/chalk.js";

/**
 * Ensure any installations happen so the native project works on the current
 * developer's machine as well.
 */
export async function ensureConfigured() {
  // Make sure there is a native project available
  if (
    !fs.existsSync(path.resolve("native")) ||
    !fs.existsSync(path.resolve("ios"))
  ) {
    console.error(
      chalk.redBright(
        "Error: No native project found. Please run `npm run init native` first."
      )
    );
    process.exit(1);
  }
}

/**
 * Build and run a Vite dev server
 */
async function buildViteServer() {
  const buildClientConfig: Vite.InlineConfig = await buildViteConfig();

  const viteServerConfig: Vite.InlineConfig = {
    root: path.resolve("app/client"),
    server: {
      host: "0.0.0.0",
      port: 3000,
      cors: true,
      hmr: {
        protocol: "ws",
        host: "localhost",
      },
    },
  };

  // Start our vite dev server
  const vite = await Vite.createServer({
    ...buildClientConfig,
    ...viteServerConfig,
  });

  vite.listen();
}

async function buildCapacitorConfig() {
  // To make the native project run using the vite dev server, we must specify
  // server.url to point to the vite dev server.
}

/**
 * This command starts up the development process for running native
 * applications.
 */
export default async function run() {
  // Ensure the native project is configured
  // await ensureConfigured();
  // Starting Development for iOS has three major portions:
  // Build the web app in developer mode
  await buildViteServer();
  // We must generate a specialized capacitor configuration file for the native
  // project to register development with the vite server.
  await buildCapacitorConfig();
  // We then sync the native files and run the native project

  // For iterating on the development environment, we must enable HMR for the
  // web app to quickly see changes. And we must create watchers that detect
  // changes that HMR can not handle (such as environment changes or native code
  // changes). When those changes are detected, we must perform the starting
  // development steps all over again to see the changes take effect.
}
