import child_process from "child_process";
import fs from "fs-extra";
import nativeIOSCheck from "./native-ios-check.js";
import path from "path";
import url from "url";
import { chalk } from "../lib/util/chalk.js";
import { description } from "../lib/util/description.js";
import { execSync } from "../lib/util/exec-sync.js";
import { FileDiff, filesDiff } from "../lib/file-management/files-diff.js";
import { npmInstall } from "../lib/util/npm-install.js";
import { promptConfirm } from "../lib/prompt/prompt-confirm.js";
import { promptSelect } from "../lib/prompt/prompt-select.js";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

function isDefined<T>(value?: T | null): value is T {
  return value !== void 0 && value !== null;
}

/**
 * Perform copy of file or directory
 */
function copy(src: string, dest: string) {
  // If it's a file copy the file
  if (fs.statSync(src).isFile()) {
    fs.copyFileSync(src, dest);
  }

  // If it's a directory copy the entire directory
  else {
    fs.copySync(src, dest);
  }
}

/**
 * Provides an override prompt with some choices how to perform the copy.
 */
async function promptOverride(src: string, dest: string, message?: string) {
  const fileName = path.basename(dest);
  const isFiles = fs.statSync(src).isFile() && fs.statSync(dest).isFile();

  console.warn("\n\n");
  const override = await promptSelect(
    message ||
      description`
      Change detected
        file: ${chalk.cyanBrightBold(fileName)}
        path: ${chalk.cyanBrightBold(path.dirname(dest))}
      What would you like to do?
    `,
    [
      "Override",
      isFiles ? "Run diff" : void 0,
      `Create ${fileName}.copy`,
      "Skip",
    ].filter(isDefined)
  );

  switch (override) {
    case "Override":
      copy(src, dest);
      break;

    case "Run diff":
      child_process.execSync(`code --diff ${src} ${dest}`);
      break;

    case `Create ${fileName}.copy`:
      copy(src, `${dest}.copy`);
      break;

    case "Skip":
    default:
      console.warn(`Skipping ${fileName} file creation.`);
      break;
  }
}

/**
 * Copies any template files from the template folder into the native
 * react-native configuration project. This is not a direct copy, but will
 * attempt to diff the files and will only perform deletes for template files
 * that start with "delete."
 */
async function copyTemplate() {
  // Path to the template folder
  const templatePath = path.resolve(__dirname, "../lib/template/empty-native");
  // Diff the template with the current native project folder structure.
  const diffs = await filesDiff(templatePath, path.resolve("native"));

  for (let i = 0, iMax = diffs.length; i < iMax; i++) {
    const [base, target, diffType] = diffs[i];

    switch (diffType) {
      case FileDiff.CHANGE:
        await promptOverride(base, target);
        break;

      case FileDiff.DELETE:
        // If the source exists, this means it is trying to switch the
        // target to a new file type
        if (fs.existsSync(base)) {
          const doDelete = await promptConfirm(
            description`A file/folder at ${chalk.cyanBrightBold(
              target
            )} has changed type and will cause the target file or folder to be overwritten. Continue?`
          );

          if (doDelete) {
            fs.removeSync(target);
          }
        }

        // Otherwise, this is just a delete and should be bypassed as we
        // don't care what the target folders contain.
        else {
          // NOOP
        }
        break;

      case FileDiff.NEW:
        // New files have the special case of possibly having a .delete prefix.
        // If the prefix is present, we look for the file in the target without
        // the prefix and delete it.
        if (path.basename(base).startsWith("delete.")) {
          const deleteTarget = path.resolve(
            path.dirname(target),
            path.basename(base).replace(/^delete\./, "")
          );
          if (fs.existsSync(deleteTarget)) {
            console.warn(`Cleaning out: ${chalk.cyanBrightBold(deleteTarget)}`);
            fs.removeSync(deleteTarget);
          }
        }

        // Otherwise, just copy the file to the target without questions.
        else {
          console.warn(`Making file: ${chalk.cyanBrightBold(target)}`);
          await copy(base, target);
        }
        break;
    }
  }
}

/**
 * Initializes a ReactNative iOS application
 */
async function initCapacitor() {
  // npm i -DE @capacitor/core
  // npm i -DE @capacitor/cli
  // npm i -DE @capacitor/android @capacitor/ios
  // npx cap add android
  // npx cap add ios
  // npx cap sync

  /**
   * "@capacitor/android": "5.3.x",
    "@capacitor/browser": "5.1.0",
    "@capacitor/cli": "5.3.x",
    "@capacitor/core": "5.3.x",
    "@capacitor/device": "5.0.6",
    "@capacitor/ios": "5.3.x",
    "@capacitor/keyboard": "5.0.6",
    "@capacitor/preferences": "5.0.6",
    "@capacitor/screen-orientation": "5.0.6",
    "@capacitor/status-bar": "5.0.6",
   */

  // Include all common capacitor dependencies on the specific versions known to
  // currently work.
  npmInstall(
    [
      "@capacitor/android@5.3.x",
      "@capacitor/browser@5.1.x",
      "@capacitor/cli@5.3.x",
      "@capacitor/core@5.3.x",
      "@capacitor/device@5.0.x",
      "@capacitor/ios@5.3.x",
      "@capacitor/keyboard@5.0.x",
      "@capacitor/preferences@5.0.x",
      "@capacitor/screen-orientation@5.0.x",
      "@capacitor/status-bar@5.0.x",
    ],
    "DE"
  );

  // Initialize an android native project
  execSync("npx", ["cap", "add", "android"]);
  // Initialize an iOS native project
  execSync("npx", ["cap", "add", "ios"]);
  // Perform first sync
  execSync("npx", ["cap", "sync"]);
}

/**
 * Initialize an iOS and android project to use the React Native SDK.
 */
export default async function run() {
  // Check if the target project already has a ui folder
  if (
    fs.existsSync(path.resolve("native")) ||
    fs.existsSync(path.resolve("ios")) ||
    fs.existsSync(path.resolve("android"))
  ) {
    throw new Error(
      "Native folder already exists in target project. Aborting..."
    );
  }

  const managerCheck = await promptConfirm(`
    This process uses npm to add dependencies. If you used yarn or another
    package manager, you may experience issues. You can delete your node_modules
    and reinstall with these commands if you are unsure:

    rm -rf node_modules
    npm i

    Are you ready to continue?
  `);

  if (!managerCheck) throw new Error("Aborting...");

  // Make sure the system has all of the iOS resources needed to run an iOS
  // react native project.
  await nativeIOSCheck();
  // Initialize the react native project
  await initCapacitor();
  // Copy template files into the target so we can configure the project to work
  // within the target project correctly.
  await copyTemplate();
}
