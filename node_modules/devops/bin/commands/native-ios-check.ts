import child_process from "child_process";
import fs from "fs-extra";
import { description } from "../lib/util/description.js";
import { targetProjectPackage } from "../lib/target-project/target-project-package.js";

/**
 * This command examines the developer's system to see if it is ready for native
 * development with React Native.
 */
export default async function run() {
  const targetPackage = await targetProjectPackage();

  // Ensure xcode-select is available
  // which xcode-select # Exit code 1 means not installed
  try {
    child_process.execFileSync("which", ["xcode-select"]);
  } catch (err) {
    if (err instanceof Error) console.warn(err.message);
    throw new Error(
      "xcode-select is not installed. Go to the App Store and install Xcode."
    );
  }

  // Ensure latest xcode command line tools are installed
  // xcode-select --install # Exit code 1 means already installed)
  try {
    child_process.execFileSync("xcode-select", ["--install"], {
      stdio: "inherit",
    });
  } catch {
    // Failure code means the tools are already installed
  }

  // Ensure the package.xcode.tools.path exists
  if (!fs.existsSync(targetPackage?.native?.xcode?.tools?.path)) {
    throw new Error(
      description`
        Xcode tools path does not exist: ${targetPackage?.native?.xcode?.tools?.path},
        this could mean your version of xcode is not installed in the correct
        location or needs to be updated
      `
    );
  }

  // Make sure the target install path is sensical for the project and will run
  // correctly. It is recommended to use the Xcode.app bundle path and not the
  // Library path in most cases.
  // xcode-select -p # Ensure points to package.xcode.tools.path
  try {
    const xcodeSelectPath = child_process.execFileSync("xcode-select", ["-p"]);
    if (
      xcodeSelectPath.toString().trim() !==
      targetPackage?.native?.xcode?.tools?.path?.trim()
    ) {
      console.warn(
        description`
          xcode-select path does not match package.native.xcode.tools.path
          xcode-select path: ${xcodeSelectPath}
          package.xcode.tools.path: ${targetPackage?.native?.xcode?.tools?.path}
        `
      );

      // sudo xcode-select --switch package.xcode.tools.path # If -p points to
      // wrong directory we switch it to the correct location
      child_process.execFileSync(
        "sudo",
        ["xcode-select", "--switch", targetPackage?.native?.xcode?.tools?.path],
        { stdio: "inherit" }
      );
    }
  } catch (err) {
    if (err instanceof Error) console.warn(err.message);
    throw new Error("Failed to validate xcode-select path");
  }

  // Ensure supported xcode version is installed and present
  // xcode-select --version # Check xcode-select version against
  // package.xcode.tools.version
  try {
    const xcodeSelectVersion = child_process.execFileSync("xcode-select", [
      "--version",
    ]);
    // Regex to pull out the first number found in a string
    const regex = /(\d+)/;
    const version = Number(
      xcodeSelectVersion?.toString()?.trim()?.match(regex)?.[0] || 0
    );
    const max = Number(targetPackage?.native.xcode?.tools?.version?.max || -1);
    const min = Number(targetPackage?.native.xcode?.tools?.version?.min || -1);

    if (isNaN(version)) {
      throw new Error(
        description`
          Could not determine xcode-select version
          xcode-select --version: ${xcodeSelectVersion.toString()}
        `
      );
    }

    if (version > max || version < min) {
      throw new Error(
        description`
          xcode-select version does not match package.xcode.tools.version
          xcode-select version: ${version}
          package.xcode.tools.version: ${JSON.stringify(
            targetPackage?.native.xcode?.tools?.version || { min: -1, max: -1 },
            null,
            2
          )}
        `
      );
    }
  } catch (err) {
    if (err instanceof Error) console.warn(err.message);
    throw new Error("Failed to validate xcode-select version");
  }

  // Check if the architecture is arm
  // arch | grep arm64
  let isARM = false;

  try {
    isARM = child_process.execSync("arch").toString().includes("arm64");
  } catch (err) {
    isARM = false;
  }

  // If we are on ARM:
  if (isARM) {
    // Ensure the ARM homebrew installation is available which means brew
    // should be installed at /opt/homebrew/bin/brew. If it is not, we run the
    // brew install script to attempt installation in the ARM location.
    // /bin/bash -c "$(curl -fsSL
    // https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    if (!fs.existsSync("/opt/homebrew/bin")) {
      try {
        child_process.execFileSync(
          "/bin/bash",
          [
            "-c",
            `$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)`,
          ],
          { stdio: "inherit" }
        );
      } catch (err) {
        throw new Error(
          "Could not properly install homebrew in the correct ARM architecture location"
        );
      }

      if (!fs.existsSync("/opt/homebrew/bin")) {
        throw new Error(
          "Could not properly install homebrew in the correct ARM architecture location"
        );
      }
    }

    // We have to install cocoapods via the ARM 64 installation for React Native
    // to not throw errors on ARM macs.
    // /opt/homebrew/bin/brew install cocoapods
    try {
      child_process.execFileSync(
        "/opt/homebrew/bin/brew",
        ["install", "cocoapods"],
        { stdio: "inherit" }
      );
    } catch (err) {
      throw new Error(
        "Could not properly install cocoapods with ARM brew architecture"
      );
    }

    // Ensure the ARM brew bin is in the PATH
    // echo $PATH | grep "/opt/homebrew/bin"
    try {
      const envPath = child_process.execSync("echo $PATH").toString();

      if (!envPath.includes("/opt/homebrew/bin")) {
        throw new Error(
          "ARM brew bin is not in the PATH. Please ensure /opt/homebrew/bin is in your PATH then try again."
        );
      }
    } catch (err) {
      if (err instanceof Error) console.warn(err.message);
      throw new Error("Failed to validate ARM brew bin in PATH");
    }
  }

  // If we are on x86 then the default react native system should work without
  // much fuss theoretically.
  else {
    // NOOP
  }
}
