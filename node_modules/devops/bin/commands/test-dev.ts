import child_process from "child_process";
import fs from "fs-extra";
import path from "path";
import url from "url";
import { wait } from "../lib/util/wait.js";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

export default async function run() {
  const commandPath = path.resolve(__dirname, "../lib/unit-test/run-tests.ts");
  const tsconfigPath = path.resolve("tsconfig.json");
  const tempTSConfigPath = path.resolve(__dirname, "../../tsconfig.unit.json");

  if (!fs.existsSync(tsconfigPath)) {
    throw new Error("Target project does not have a TSConfig");
  }

  // Copy the target project tsconfig to this directory so we can use the target
  // configuration but trick ts-node into it's slightly confused expectations
  const targetTSConfig = fs.readJsonSync(tsconfigPath);
  // Write to this directory
  fs.writeJSONSync(tempTSConfigPath, targetTSConfig);
  // Let the file flush to the HD
  await wait(200);
  // Set up the watch flag
  process.env.WATCH = "true";

  child_process.execFileSync(
    "ts-node",
    [
      "--esm",
      "--transpile-only",
      `--project`,
      tempTSConfigPath,
      commandPath,
    ].filter(Boolean),
    { stdio: "inherit" }
  );

  // Remove the temporary tsconfig
  fs.removeSync(tempTSConfigPath);
}
