import fs from "fs-extra";
import path from "path";
import releaseClient from "../lib/build/web-app/vite/release-client.js";
import releaseLibrary from "../lib/build/library/vite/release-library.js";
import releaseStories from "../lib/build/library/release-stories.js";
import { chalk } from "../lib/util/chalk.js";
import { gitReturnToDev } from "../lib/git/git-return-to-dev.js";
import { npmRun } from "../lib/util/npm-run.js";
import { promptConfirm } from "../lib/prompt/prompt-confirm.js";

/**
 * This method checks all of the package json settings and ensures the
 * repositories listed are valid for use within this context.
 */
async function validateRelease() {
  if (process.env.QUICK_BUILD === "true") return;
  // Run the view-release command to see if the release process produces
  // a valid output
  // Run the view-release script
  await npmRun("release", ["view"]);

  // Ask if the view-release script looks good and should continue
  const shouldContinue = await promptConfirm(
    "\nShould the release continue being made?"
  );

  // Quit the process if the view release did not work
  if (!shouldContinue) {
    await gitReturnToDev(true);
    process.exit(1);
  }
}

/**
 * This performs all bundling procedures and set up needed to bundle the
 * project.
 */
async function bundleProject() {
  console.warn(
    "Gathering build targets from:",
    chalk.yellowBright(path.resolve("build.conf.js"))
  );
  const buildEnvironments = (await import(path.resolve("build.conf.js")))
    .BUILD_TARGETS;
  process.env.NODE_ENV = "production";

  console.warn(
    "Building environments",
    chalk.redBrightBold(JSON.stringify(buildEnvironments))
  );

  if (!Array.isArray(buildEnvironments)) {
    console.error("build.conf.js must be an array of string values");
    process.exit(1);
  }

  for (const env of buildEnvironments) {
    await releaseClient(env);
  }

  await releaseLibrary();
  await releaseStories();
}

/**
 * This clears out the distribution folder so no lingering irrelevant fragments
 * exists.
 */
async function clearPreviousDistribution() {
  try {
    fs.removeSync(path.resolve("dist"));
  } catch (err) {
    console.warn("No dist folder to clean out.");
  }

  fs.ensureDirSync(path.resolve("dist"));
}

/**
 * This copies all necessary elements from the project into the distribution
 */
async function copyAndCleanFragments() {
  // Clean out the compiled test file typings
  try {
    fs.removeSync(path.resolve("dist/test"));
  } catch (err) {
    console.warn("No test folder to clean out");
  }

  // Clean out unit-tests
  try {
    fs.removeSync(path.resolve("dist/unit-test"));
  } catch (err) {
    console.warn("No unit-test folder to clean out");
  }
}

export default async function run() {
  // Perform any typescript specific actions
  await validateRelease();
  // Delete any files in the dist folder so we have a clean build with no
  // chances of caching or keeping no longer relevant files.
  await clearPreviousDistribution();
  // Build the monolithic distribution
  await bundleProject();
  // Copy and delete any fragments in the dist folder that is necessary
  await copyAndCleanFragments();
}
