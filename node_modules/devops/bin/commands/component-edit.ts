import findComponent from "../lib/component/find-component.js";
import path from "path";
import { checkComponentStructure } from "../lib/component/check-component-structure.js";
import { getAllComponents } from "../lib/component/get-all-components.js";
import { getComponentPaths } from "../lib/component/get-component-paths.js";
import { openFile } from "../lib/file-management/open-file.js";
import { promptSelect } from "../lib/prompt/prompt-select.js";

type Paths = {
  componentsPath: string;
  storiesComponents: string;
  storiesData: string;
};

type Selections = {
  directory: string;
  name: string;
};

/**
 * This prompts the user for the component name and directory of choice.
 */
async function requestName(paths: Paths, name: string) {
  // If the name of the desired component was not provided, let's provide an
  // automated curated list to pick from
  if (!name) {
    const allFiles = await getAllComponents(paths);
    const checkFiles = new Set<string>();
    allFiles.forEach((f) =>
      checkFiles.add(path.basename(f).split(".").slice(0, -1).join("."))
    );

    name =
      (await promptSelect(
        "Type a name for the component:",
        Array.from(checkFiles.values())
      )) || "";
  }

  return findComponent(name, paths);
}

/**
 * Opens the file fragments
 */
async function openRelevantFiles(paths: Paths, selections: Selections) {
  // Open file fragments
  try {
    // Get all of the paths to the component's files
    const allPaths = getComponentPaths(paths, selections);
    // Open the written files for review
    openFile([
      allPaths.component,
      allPaths.scss,
      ...allPaths.stories,
      ...allPaths.props,
      // Reopen component file to ensure it is in focus when operation is done
      allPaths.component,
    ]);
  } catch (err) {
    console.warn("Could not open all file fragments:\n", err);
    process.exit(1);
  }
}

/**
 * This command will establish that this is a storybook based project with a
 * certain layout. Then, this will create and update all of the fragments needed
 * to add a new component to the library project, which includes:
 *
 * - component.tsx
 * - component.scss
 * - component.stories.tsx (for testing)
 * - component-props.tsx (for testing)
 * - update nearest barrel file to export the new component
 * - open all of the new fragments in the current editor
 */
export async function run(name: string, ..._args: any) {
  // Validate the project structure and provide the paths that have been
  // determined valid.
  const paths = await checkComponentStructure();
  // Requests the directory and the component name from the user
  const selections = await requestName(paths, name);
  // Perform the file creation by utilizing the templates
  await openRelevantFiles(paths, selections);
}
