import fs from "fs-extra";
import Ignore from "ignore";
import path from "path";
import shell from "shelljs";
import { wait } from "../lib/util/wait.js";

const gitIgnorePath = path.resolve(".gitignore");
let ignore = Ignore();

if (fs.existsSync(gitIgnorePath)) {
  ignore = ignore.add(fs.readFileSync(gitIgnorePath).toString());
}

/**
 * Executes typescript type compilation without emitting anything. This can be
 * used to find errors in the project before a release is attempted. Or you can
 * run this as nodemon process to find errors as development happens.
 */
async function runTypescript(mode: string) {
  // Build declaration files for the library only
  const tsConfig = fs.readJSONSync(path.resolve("tsconfig.json"));
  tsConfig.exclude = tsConfig.exclude || [];
  // tsConfig.exclude.push("lib/server");
  fs.writeJSONSync(path.resolve("tsconfig.temp.json"), tsConfig);
  // Ensure the file system has flushed the temp file to disk
  await wait(500);

  // Make a clean up routine for watch mode
  if (mode === "watch") {
    const handleExit = async () => {
      console.warn("Exit TS process");

      try {
        fs.removeSync(path.resolve("tsconfig.temp.json"));
      } catch (err) {
        // NOOP
      }

      process.exit(0);
    };

    // Catch when app is closing
    process.on("exit", handleExit);
    // Catch ctrl+c event
    process.on("SIGINT", handleExit);
    // Catch "kill pid" (for example: nodemon restart)
    process.on("SIGUSR1", handleExit);
    process.on("SIGUSR2", handleExit);
    process.on("SIGTERM", handleExit);
    // Catch uncaught exceptions
    process.on("uncaughtException", handleExit);
  }

  if (
    shell.exec(
      `tsc -d ${
        mode === "watch" ? "--watch" : ""
      } --incremental --noemit --pretty --tsBuildInfoFile ${path.resolve(
        "node_modules/.cache/tsc/tsc.tsbuildinfo"
      )} --outDir ${path.resolve("dist")} --project ${path.resolve(
        "tsconfig.temp.json"
      )}`
    ).code !== 0
  ) {
    console.warn("Failed to compile type declarations");
    fs.removeSync(path.resolve("tsconfig.temp.json"));
    process.exit(1);
  }

  const eslintTargets = (tsConfig?.include || [])
    .filter((p: string) => !ignore.ignores(path.relative("./", p)))
    .map((p: string) => path.resolve(p))
    .filter((p: string) => fs.existsSync(p) && !p.includes("node_modules"));

  if (eslintTargets.length > 0) {
    if (
      shell.exec(
        `eslint ${eslintTargets.join(" ")} -c ${path.resolve(
          ".eslintrc"
        )} --ext .ts --ext .tsx`
      ).code !== 0
    ) {
      console.warn("Failed eslint checks.");
      fs.removeSync(path.resolve("tsconfig.temp.json"));
      process.exit(1);
    }
  }

  fs.removeSync(path.resolve("tsconfig.temp.json"));
}

export default async function run(mode: string) {
  await runTypescript(mode);
}
